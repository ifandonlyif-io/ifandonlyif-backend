// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: admin_user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAdminUser = `-- name: CreateAdminUser :one
insert into admin_users ("name", "email", "password", "is_admin") values ($1, $2, $3, $4) RETURNING id, name, email, password, is_admin, created_at
`

type CreateAdminUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	IsAdmin  bool   `json:"isAdmin"`
}

func (q *Queries) CreateAdminUser(ctx context.Context, arg CreateAdminUserParams) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, createAdminUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.IsAdmin,
	)
	var i AdminUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAdminUser = `-- name: DeleteAdminUser :exec
delete from admin_users where "id" = $1
`

func (q *Queries) DeleteAdminUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAdminUser, id)
	return err
}

const getAdminUserByEmail = `-- name: GetAdminUserByEmail :one
select id, name, email, password, is_admin, created_at from admin_users where "email" = $1 limit 1
`

func (q *Queries) GetAdminUserByEmail(ctx context.Context, email string) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, getAdminUserByEmail, email)
	var i AdminUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const getAdminUserByID = `-- name: GetAdminUserByID :one
select id, name, email, password, is_admin, created_at from admin_users where "id" = $1 limit 1
`

func (q *Queries) GetAdminUserByID(ctx context.Context, id uuid.UUID) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, getAdminUserByID, id)
	var i AdminUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const getAllAdminUsers = `-- name: GetAllAdminUsers :many
select id, name, email, password, is_admin, created_at from admin_users
`

func (q *Queries) GetAllAdminUsers(ctx context.Context) ([]AdminUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllAdminUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AdminUser{}
	for rows.Next() {
		var i AdminUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.IsAdmin,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdminUser = `-- name: UpdateAdminUser :one
update admin_users set "name" = $2, "email" = $3, "password" = $4 where "id" = $1 RETURNING id, name, email, password, is_admin, created_at
`

type UpdateAdminUserParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
}

func (q *Queries) UpdateAdminUser(ctx context.Context, arg UpdateAdminUserParams) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, updateAdminUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i AdminUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}
