// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: admin_user_token.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserToken = `-- name: CreateUserToken :one
insert into admin_user_tokens ("user_id", "token") values ($1, $2) RETURNING user_id, token
`

type CreateUserTokenParams struct {
	UserID uuid.UUID `json:"userId"`
	Token  string    `json:"token"`
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) (AdminUserToken, error) {
	row := q.db.QueryRowContext(ctx, createUserToken, arg.UserID, arg.Token)
	var i AdminUserToken
	err := row.Scan(&i.UserID, &i.Token)
	return i, err
}

const deleteUserToken = `-- name: DeleteUserToken :exec
delete from admin_user_tokens where "user_id" = $1
`

func (q *Queries) DeleteUserToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserToken, userID)
	return err
}

const getTokenByUserId = `-- name: GetTokenByUserId :one
select user_id, token from admin_user_tokens where "user_id" = $1
`

func (q *Queries) GetTokenByUserId(ctx context.Context, userID uuid.UUID) (AdminUserToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUserId, userID)
	var i AdminUserToken
	err := row.Scan(&i.UserID, &i.Token)
	return i, err
}

const getUserIdByToken = `-- name: GetUserIdByToken :one
select user_id, token from admin_user_tokens where "token" = $1
`

func (q *Queries) GetUserIdByToken(ctx context.Context, token string) (AdminUserToken, error) {
	row := q.db.QueryRowContext(ctx, getUserIdByToken, token)
	var i AdminUserToken
	err := row.Scan(&i.UserID, &i.Token)
	return i, err
}

const updateUserToken = `-- name: UpdateUserToken :one
update admin_user_tokens set "token" = $1 where "user_id" = $2 RETURNING user_id, token
`

type UpdateUserTokenParams struct {
	Token  string    `json:"token"`
	UserID uuid.UUID `json:"userId"`
}

func (q *Queries) UpdateUserToken(ctx context.Context, arg UpdateUserTokenParams) (AdminUserToken, error) {
	row := q.db.QueryRowContext(ctx, updateUserToken, arg.Token, arg.UserID)
	var i AdminUserToken
	err := row.Scan(&i.UserID, &i.Token)
	return i, err
}
