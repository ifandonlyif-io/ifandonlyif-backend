// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: report_blocklist.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createReportBlocklist = `-- name: CreateReportBlocklist :one
INSERT INTO report_blocklists (
  http_address,
  user_wallet_address
) VALUES (
  $1, $2
) RETURNING id, http_address, verified_at, user_wallet_address, created_at, disproved_at
`

type CreateReportBlocklistParams struct {
	HttpAddress       string         `json:"httpAddress"`
	UserWalletAddress sql.NullString `json:"userWalletAddress"`
}

func (q *Queries) CreateReportBlocklist(ctx context.Context, arg CreateReportBlocklistParams) (ReportBlocklist, error) {
	row := q.db.QueryRowContext(ctx, createReportBlocklist, arg.HttpAddress, arg.UserWalletAddress)
	var i ReportBlocklist
	err := row.Scan(
		&i.ID,
		&i.HttpAddress,
		&i.VerifiedAt,
		&i.UserWalletAddress,
		&i.CreatedAt,
		&i.DisprovedAt,
	)
	return i, err
}

const deleteReportBlocklist = `-- name: DeleteReportBlocklist :exec
DELETE FROM report_blocklists
WHERE id = $1
`

func (q *Queries) DeleteReportBlocklist(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteReportBlocklist, id)
	return err
}

const getReportBlocklist = `-- name: GetReportBlocklist :one
SELECT id, http_address, verified_at, user_wallet_address, created_at, disproved_at FROM report_blocklists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReportBlocklist(ctx context.Context, id uuid.UUID) (ReportBlocklist, error) {
	row := q.db.QueryRowContext(ctx, getReportBlocklist, id)
	var i ReportBlocklist
	err := row.Scan(
		&i.ID,
		&i.HttpAddress,
		&i.VerifiedAt,
		&i.UserWalletAddress,
		&i.CreatedAt,
		&i.DisprovedAt,
	)
	return i, err
}

const getReportBlocklistUpdate = `-- name: GetReportBlocklistUpdate :one
SELECT id, http_address, verified_at, user_wallet_address, created_at, disproved_at FROM report_blocklists
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetReportBlocklistUpdate(ctx context.Context, id uuid.UUID) (ReportBlocklist, error) {
	row := q.db.QueryRowContext(ctx, getReportBlocklistUpdate, id)
	var i ReportBlocklist
	err := row.Scan(
		&i.ID,
		&i.HttpAddress,
		&i.VerifiedAt,
		&i.UserWalletAddress,
		&i.CreatedAt,
		&i.DisprovedAt,
	)
	return i, err
}

const listReportBlocklists = `-- name: ListReportBlocklists :many
SELECT id, http_address, verified_at, user_wallet_address, created_at, disproved_at FROM report_blocklists
`

func (q *Queries) ListReportBlocklists(ctx context.Context) ([]ReportBlocklist, error) {
	rows, err := q.db.QueryContext(ctx, listReportBlocklists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportBlocklist{}
	for rows.Next() {
		var i ReportBlocklist
		if err := rows.Scan(
			&i.ID,
			&i.HttpAddress,
			&i.VerifiedAt,
			&i.UserWalletAddress,
			&i.CreatedAt,
			&i.DisprovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReportBlocklistVerified = `-- name: UpdateReportBlocklistVerified :one
UPDATE report_blocklists
SET verified_at = $2
WHERE id = $1
RETURNING id, http_address, verified_at, user_wallet_address, created_at, disproved_at
`

type UpdateReportBlocklistVerifiedParams struct {
	ID         uuid.UUID    `json:"id"`
	VerifiedAt sql.NullTime `json:"verifiedAt"`
}

func (q *Queries) UpdateReportBlocklistVerified(ctx context.Context, arg UpdateReportBlocklistVerifiedParams) (ReportBlocklist, error) {
	row := q.db.QueryRowContext(ctx, updateReportBlocklistVerified, arg.ID, arg.VerifiedAt)
	var i ReportBlocklist
	err := row.Scan(
		&i.ID,
		&i.HttpAddress,
		&i.VerifiedAt,
		&i.UserWalletAddress,
		&i.CreatedAt,
		&i.DisprovedAt,
	)
	return i, err
}
