// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: iff_nft.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createIffNft = `-- name: CreateIffNft :one
INSERT INTO iff_nfts (
  project_id,
  user_wallet_address,
  nft_projects_contract_address,
  nft_projects_collection_name,
  mint_date,
  mint_transaction
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, project_id, user_wallet_address, nft_projects_contract_address, nft_projects_collection_name, mint_date, mint_transaction
`

type CreateIffNftParams struct {
	ProjectID                  int64     `json:"projectID"`
	UserWalletAddress          string    `json:"userWalletAddress"`
	NftProjectsContractAddress string    `json:"nftProjectsContractAddress"`
	NftProjectsCollectionName  string    `json:"nftProjectsCollectionName"`
	MintDate                   time.Time `json:"mintDate"`
	MintTransaction            string    `json:"mintTransaction"`
}

func (q *Queries) CreateIffNft(ctx context.Context, arg CreateIffNftParams) (IffNft, error) {
	row := q.db.QueryRowContext(ctx, createIffNft,
		arg.ProjectID,
		arg.UserWalletAddress,
		arg.NftProjectsContractAddress,
		arg.NftProjectsCollectionName,
		arg.MintDate,
		arg.MintTransaction,
	)
	var i IffNft
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserWalletAddress,
		&i.NftProjectsContractAddress,
		&i.NftProjectsCollectionName,
		&i.MintDate,
		&i.MintTransaction,
	)
	return i, err
}

const getIffNftForUpdate = `-- name: GetIffNftForUpdate :one
SELECT id, project_id, user_wallet_address, nft_projects_contract_address, nft_projects_collection_name, mint_date, mint_transaction FROM iff_nfts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetIffNftForUpdate(ctx context.Context, id uuid.UUID) (IffNft, error) {
	row := q.db.QueryRowContext(ctx, getIffNftForUpdate, id)
	var i IffNft
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserWalletAddress,
		&i.NftProjectsContractAddress,
		&i.NftProjectsCollectionName,
		&i.MintDate,
		&i.MintTransaction,
	)
	return i, err
}

const getIffNfts = `-- name: GetIffNfts :one
SELECT id, project_id, user_wallet_address, nft_projects_contract_address, nft_projects_collection_name, mint_date, mint_transaction FROM iff_nfts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIffNfts(ctx context.Context, id uuid.UUID) (IffNft, error) {
	row := q.db.QueryRowContext(ctx, getIffNfts, id)
	var i IffNft
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserWalletAddress,
		&i.NftProjectsContractAddress,
		&i.NftProjectsCollectionName,
		&i.MintDate,
		&i.MintTransaction,
	)
	return i, err
}

const listIffNfts = `-- name: ListIffNfts :many
SELECT id, project_id, user_wallet_address, nft_projects_contract_address, nft_projects_collection_name, mint_date, mint_transaction FROM iff_nfts
`

func (q *Queries) ListIffNfts(ctx context.Context) ([]IffNft, error) {
	rows, err := q.db.QueryContext(ctx, listIffNfts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IffNft{}
	for rows.Next() {
		var i IffNft
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.UserWalletAddress,
			&i.NftProjectsContractAddress,
			&i.NftProjectsCollectionName,
			&i.MintDate,
			&i.MintTransaction,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
