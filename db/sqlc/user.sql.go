// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  full_name,
  wallet,
  country_code,
  email_address,
  twitter_name,
  image_uri,
  nonce
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, full_name, wallet, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
`

type CreateUserParams struct {
	FullName     sql.NullString `json:"fullName"`
	Wallet       sql.NullString `json:"wallet"`
	CountryCode  sql.NullString `json:"countryCode"`
	EmailAddress sql.NullString `json:"emailAddress"`
	TwitterName  sql.NullString `json:"twitterName"`
	ImageUri     sql.NullString `json:"imageUri"`
	Nonce        sql.NullString `json:"nonce"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.Wallet,
		arg.CountryCode,
		arg.EmailAddress,
		arg.TwitterName,
		arg.ImageUri,
		arg.Nonce,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Wallet,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
select ID, COALESCE(full_name),COALESCE(wallet),COALESCE(created_at),COALESCE(country_code),COALESCE(email_address),COALESCE(kyc_date),COALESCE(twitter_name),COALESCE(blockpass_id),COALESCE(image_uri),COALESCE(nonce)
FROM users
WHERE id = $1 LIMIT 1
`

type GetUserRow struct {
	ID           uuid.UUID `json:"id"`
	FullName     string    `json:"fullName"`
	Wallet       string    `json:"wallet"`
	CreatedAt    time.Time `json:"createdAt"`
	CountryCode  string    `json:"countryCode"`
	EmailAddress string    `json:"emailAddress"`
	KycDate      time.Time `json:"kycDate"`
	TwitterName  string    `json:"twitterName"`
	BlockpassID  int64     `json:"blockpassID"`
	ImageUri     string    `json:"imageUri"`
	Nonce        string    `json:"nonce"`
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Wallet,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const getUserByWalletAddress = `-- name: GetUserByWalletAddress :one
select ID,COALESCE(full_name),COALESCE(wallet),COALESCE(nonce)
FROM users
WHERE wallet = $1 LIMIT 1
`

type GetUserByWalletAddressRow struct {
	ID       uuid.UUID `json:"id"`
	FullName string    `json:"fullName"`
	Wallet   string    `json:"wallet"`
	Nonce    string    `json:"nonce"`
}

func (q *Queries) GetUserByWalletAddress(ctx context.Context, wallet sql.NullString) (GetUserByWalletAddressRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByWalletAddress, wallet)
	var i GetUserByWalletAddressRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Wallet,
		&i.Nonce,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
select id, full_name, wallet, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
FROM users
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Wallet,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
select id, full_name, wallet, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Wallet,
			&i.CreatedAt,
			&i.CountryCode,
			&i.EmailAddress,
			&i.KycDate,
			&i.TwitterName,
			&i.BlockpassID,
			&i.ImageUri,
			&i.Nonce,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserEmailAddress = `-- name: UpdateUserEmailAddress :one
UPDATE users
SET email_address = $2
WHERE id = $1
RETURNING id, full_name, wallet, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
`

type UpdateUserEmailAddressParams struct {
	ID           uuid.UUID      `json:"id"`
	EmailAddress sql.NullString `json:"emailAddress"`
}

func (q *Queries) UpdateUserEmailAddress(ctx context.Context, arg UpdateUserEmailAddressParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmailAddress, arg.ID, arg.EmailAddress)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Wallet,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const updateUserKycDate = `-- name: UpdateUserKycDate :one
UPDATE users
SET kyc_date = $2
WHERE id = $1
RETURNING id, full_name, wallet, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
`

type UpdateUserKycDateParams struct {
	ID      uuid.UUID    `json:"id"`
	KycDate sql.NullTime `json:"kycDate"`
}

func (q *Queries) UpdateUserKycDate(ctx context.Context, arg UpdateUserKycDateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserKycDate, arg.ID, arg.KycDate)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Wallet,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const updateUserNonce = `-- name: UpdateUserNonce :one
UPDATE users
SET nonce = $2
WHERE wallet = $1
RETURNING id, full_name, wallet, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
`

type UpdateUserNonceParams struct {
	Wallet sql.NullString `json:"wallet"`
	Nonce  sql.NullString `json:"nonce"`
}

func (q *Queries) UpdateUserNonce(ctx context.Context, arg UpdateUserNonceParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserNonce, arg.Wallet, arg.Nonce)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Wallet,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const updateUserTwitterName = `-- name: UpdateUserTwitterName :one
UPDATE users
SET twitter_name = $2
WHERE id = $1
RETURNING id, full_name, wallet, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
`

type UpdateUserTwitterNameParams struct {
	ID          uuid.UUID      `json:"id"`
	TwitterName sql.NullString `json:"twitterName"`
}

func (q *Queries) UpdateUserTwitterName(ctx context.Context, arg UpdateUserTwitterNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserTwitterName, arg.ID, arg.TwitterName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Wallet,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}
