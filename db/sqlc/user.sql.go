// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  full_name,
  wallet_address,
  country_code,
  email_address,
  twitter_name,
  image_uri,
  nonce
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, full_name, wallet_address, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
`

type CreateUserParams struct {
	FullName      sql.NullString `json:"full_name"`
	WalletAddress sql.NullString `json:"wallet_address"`
	CountryCode   sql.NullString `json:"country_code"`
	EmailAddress  sql.NullString `json:"email_address"`
	TwitterName   sql.NullString `json:"twitter_name"`
	ImageUri      sql.NullString `json:"image_uri"`
	Nonce         sql.NullString `json:"nonce"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.WalletAddress,
		arg.CountryCode,
		arg.EmailAddress,
		arg.TwitterName,
		arg.ImageUri,
		arg.Nonce,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.WalletAddress,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, wallet_address, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.WalletAddress,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const getUserByWalletAddress = `-- name: GetUserByWalletAddress :one
SELECT id, full_name, wallet_address, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce FROM users
WHERE wallet_address = $1 LIMIT 1
`

func (q *Queries) GetUserByWalletAddress(ctx context.Context, walletAddress sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByWalletAddress, walletAddress)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.WalletAddress,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, full_name, wallet_address, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce FROM users
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.WalletAddress,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, full_name, wallet_address, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.WalletAddress,
			&i.CreatedAt,
			&i.CountryCode,
			&i.EmailAddress,
			&i.KycDate,
			&i.TwitterName,
			&i.BlockpassID,
			&i.ImageUri,
			&i.Nonce,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserEmailAddress = `-- name: UpdateUserEmailAddress :one
UPDATE users
SET email_address = $2
WHERE id = $1
RETURNING id, full_name, wallet_address, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
`

type UpdateUserEmailAddressParams struct {
	ID           uuid.UUID      `json:"id"`
	EmailAddress sql.NullString `json:"email_address"`
}

func (q *Queries) UpdateUserEmailAddress(ctx context.Context, arg UpdateUserEmailAddressParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmailAddress, arg.ID, arg.EmailAddress)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.WalletAddress,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const updateUserKycDate = `-- name: UpdateUserKycDate :one
UPDATE users
SET kyc_date = $2
WHERE id = $1
RETURNING id, full_name, wallet_address, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
`

type UpdateUserKycDateParams struct {
	ID      uuid.UUID    `json:"id"`
	KycDate sql.NullTime `json:"kyc_date"`
}

func (q *Queries) UpdateUserKycDate(ctx context.Context, arg UpdateUserKycDateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserKycDate, arg.ID, arg.KycDate)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.WalletAddress,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}

const updateUserTwitterName = `-- name: UpdateUserTwitterName :one
UPDATE users
SET twitter_name = $2
WHERE id = $1
RETURNING id, full_name, wallet_address, created_at, country_code, email_address, kyc_date, twitter_name, blockpass_id, image_uri, nonce
`

type UpdateUserTwitterNameParams struct {
	ID          uuid.UUID      `json:"id"`
	TwitterName sql.NullString `json:"twitter_name"`
}

func (q *Queries) UpdateUserTwitterName(ctx context.Context, arg UpdateUserTwitterNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserTwitterName, arg.ID, arg.TwitterName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.WalletAddress,
		&i.CreatedAt,
		&i.CountryCode,
		&i.EmailAddress,
		&i.KycDate,
		&i.TwitterName,
		&i.BlockpassID,
		&i.ImageUri,
		&i.Nonce,
	)
	return i, err
}
