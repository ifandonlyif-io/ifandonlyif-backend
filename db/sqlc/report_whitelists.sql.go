// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: report_whitelists.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createReportWhitelist = `-- name: CreateReportWhitelist :one
INSERT INTO report_whitelists (
  http_address,
  user_wallet_address
) VALUES (
  $1, $2
) RETURNING id, http_address, verified_at, user_wallet_address, created_at
`

type CreateReportWhitelistParams struct {
	HttpAddress       string         `json:"http_address"`
	UserWalletAddress sql.NullString `json:"user_wallet_address"`
}

func (q *Queries) CreateReportWhitelist(ctx context.Context, arg CreateReportWhitelistParams) (ReportWhitelist, error) {
	row := q.db.QueryRowContext(ctx, createReportWhitelist, arg.HttpAddress, arg.UserWalletAddress)
	var i ReportWhitelist
	err := row.Scan(
		&i.ID,
		&i.HttpAddress,
		&i.VerifiedAt,
		&i.UserWalletAddress,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReportWhitelist = `-- name: DeleteReportWhitelist :exec
DELETE FROM report_whitelists
WHERE id = $1
`

func (q *Queries) DeleteReportWhitelist(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteReportWhitelist, id)
	return err
}

const getReportWhitelis = `-- name: GetReportWhitelis :one
SELECT id, http_address, verified_at, user_wallet_address, created_at FROM report_whitelists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReportWhitelis(ctx context.Context, id uuid.UUID) (ReportWhitelist, error) {
	row := q.db.QueryRowContext(ctx, getReportWhitelis, id)
	var i ReportWhitelist
	err := row.Scan(
		&i.ID,
		&i.HttpAddress,
		&i.VerifiedAt,
		&i.UserWalletAddress,
		&i.CreatedAt,
	)
	return i, err
}

const getReportWhitelistUpdate = `-- name: GetReportWhitelistUpdate :one
SELECT id, http_address, verified_at, user_wallet_address, created_at FROM report_whitelists
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetReportWhitelistUpdate(ctx context.Context, id uuid.UUID) (ReportWhitelist, error) {
	row := q.db.QueryRowContext(ctx, getReportWhitelistUpdate, id)
	var i ReportWhitelist
	err := row.Scan(
		&i.ID,
		&i.HttpAddress,
		&i.VerifiedAt,
		&i.UserWalletAddress,
		&i.CreatedAt,
	)
	return i, err
}

const listReportWhitelist = `-- name: ListReportWhitelist :many
SELECT id, http_address, verified_at, user_wallet_address, created_at FROM report_whitelists
`

func (q *Queries) ListReportWhitelist(ctx context.Context) ([]ReportWhitelist, error) {
	rows, err := q.db.QueryContext(ctx, listReportWhitelist)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReportWhitelist
	for rows.Next() {
		var i ReportWhitelist
		if err := rows.Scan(
			&i.ID,
			&i.HttpAddress,
			&i.VerifiedAt,
			&i.UserWalletAddress,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReportWhitelisVerified = `-- name: UpdateReportWhitelisVerified :one
UPDATE report_whitelists
SET verified_at = $2
WHERE id = $1
RETURNING id, http_address, verified_at, user_wallet_address, created_at
`

type UpdateReportWhitelisVerifiedParams struct {
	ID         uuid.UUID    `json:"id"`
	VerifiedAt sql.NullTime `json:"verified_at"`
}

func (q *Queries) UpdateReportWhitelisVerified(ctx context.Context, arg UpdateReportWhitelisVerifiedParams) (ReportWhitelist, error) {
	row := q.db.QueryRowContext(ctx, updateReportWhitelisVerified, arg.ID, arg.VerifiedAt)
	var i ReportWhitelist
	err := row.Scan(
		&i.ID,
		&i.HttpAddress,
		&i.VerifiedAt,
		&i.UserWalletAddress,
		&i.CreatedAt,
	)
	return i, err
}
