basePath: /
definitions:
  api.renewAccessTokenResponse:
    properties:
      accessToken:
        type: string
      accessTokenExpiresAt:
        type: integer
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Ifandonlyif API
  version: "1.0"
paths:
  /api/disproveBlocklist:
    post:
      consumes:
      - '*/*'
      description: disprove blocklist by uuid
      parameters:
      - description: uuid
        in: body
        name: uuid
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: DisproveBlocklist
      tags:
      - DisproveBlocklist
  /api/fetchBlockListById:
    post:
      consumes:
      - '*/*'
      description: fetch blocklist by uuid
      parameters:
      - description: uuid
        in: body
        name: uuid
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: fetchBlockListById
      tags:
      - fetchBlockListById
  /api/getAllBlockLists:
    get:
      consumes:
      - '*/*'
      description: get all blocklists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: getAllBlockLists
      tags:
      - getAllBlockLists
  /api/listDisprovedBlocklists:
    get:
      consumes:
      - '*/*'
      description: get all disproved blocklists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ListDisprovedBlocklists
      tags:
      - ListDisprovedBlocklists
  /api/listUnreviewedBlocklists:
    get:
      consumes:
      - '*/*'
      description: get all unreviewed blocklists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ListUnreviewedBlocklists
      tags:
      - ListUnreviewedBlocklists
  /api/listVerifiedBlocklists:
    get:
      consumes:
      - '*/*'
      description: fetch verified blocklists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ListVerifiedBlocklists
      tags:
      - ListVerifiedBlocklists
  /api/verifyBlocklist:
    post:
      consumes:
      - '*/*'
      description: verify blocklist by uuid
      parameters:
      - description: uuid
        in: body
        name: uuid
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: VerifyBlocklist
      tags:
      - VerifyBlocklist
  /auth/fetchUserNfts:
    post:
      consumes:
      - '*/*'
      description: get mintable USER NFTS
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: fetchUserNfts
      tags:
      - fetchUserNfts
  /checkBlocklists:
    post:
      consumes:
      - '*/*'
      description: fetch blocklist by uri
      parameters:
      - description: uuid
        in: body
        name: uuid
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: CheckBlocklists
      tags:
      - CheckBlocklists
  /checkExistBlocklists:
    post:
      consumes:
      - '*/*'
      description: fetch blocklist by uri
      parameters:
      - description: uri
        in: body
        name: uri
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: CheckExistBlocklists
      tags:
      - CheckExistBlocklists
  /checkUri:
    post:
      consumes:
      - '*/*'
      description: fetch blocklist by uri
      parameters:
      - description: uri
        in: body
        name: uri
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: checkUri
      tags:
      - checkUri
  /code:
    post:
      consumes:
      - application/json
      description: register a new user
      parameters:
      - description: wallet
        in: body
        name: wallet
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: code
      tags:
      - code
  /discord/appliances:
    get:
      consumes:
      - '*/*'
      description: get all appliances, for admin page
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Appliances from discord bot
      tags:
      - Admin Page
  /discord/apply:
    post:
      consumes:
      - '*/*'
      description: apply api for discord bot
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      summary: Apply from discord bot
      tags:
      - Discord Bot
  /discord/approve/:id:
    patch:
      consumes:
      - '*/*'
      description: approve discord channel to report project
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Approve discord channel
      tags:
      - Admin Page
  /discord/channel/lock/:id:
    patch:
      consumes:
      - '*/*'
      description: lock discord channel to prevent report project
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Lock discord channel
      tags:
      - Admin Page
  /discord/channel/unlock/:id:
    patch:
      consumes:
      - '*/*'
      description: unlock discord channel to allow report project
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Unlock discord channel
      tags:
      - Admin Page
  /discord/channels:
    get:
      consumes:
      - '*/*'
      description: get all discord channels can report projects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get all discord channels
      tags:
      - Admin Page
  /discord/report:
    post:
      consumes:
      - '*/*'
      description: report api for discord bot
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      summary: Report from discord bot
      tags:
      - Discord Bot
  /ethToUsd:
    get:
      consumes:
      - '*/*'
      description: get current 1 ETH to USD price
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ethToUsd
      tags:
      - ethToUsd
  /gasInfo:
    get:
      consumes:
      - '*/*'
      description: get 24 hours gas prices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: gasInfo
      tags:
      - gasInfo
  /health:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - health
  /login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: wallet
        in: body
        name: wallet
        required: true
        schema:
          type: string
      - description: signature
        in: body
        name: signature
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: login
      tags:
      - login
  /nftProjects:
    get:
      consumes:
      - '*/*'
      description: fetch limited nft projects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: nftProjects
      tags:
      - nftProjects
  /renewAccess:
    post:
      consumes:
      - application/json
      description: renewAccess
      parameters:
      - description: refreshToken
        in: body
        name: refreshToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.renewAccessTokenResponse'
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: renewAccess
      tags:
      - renewAccess
swagger: "2.0"
