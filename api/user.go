package api

import (
	"database/sql"
	"net/http"
	"time"

	db "github.com/ifandonlyif-io/ifandonlyif-backend/db/sqlc"
	_ "github.com/ifandonlyif-io/ifandonlyif-backend/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/labstack/echo/v4"
)

type createUserRequest struct {
	fullName      string `json:"fullName" binding:"required"`
	walletAddress string `json:"walletAddress" binding:"required"`
	countryCode   string `json:"countryCode" binding:"required"`
	emailAddress  string `json:"emailAddress" binding:"required"`
	twitterName   string `json:"twitterName" binding:"required"`
	imageUri      string `json:"imageUri" binding:"required"`
	nonce         string `json:"twitterName" binding:"required"`
}

type userResponse struct {
	fullName      string    `json:"fullName"`
	walletAddress string    `json:"walletAddress"`
	countryCode   string    `json:"countryCode"`
	emailAddress  string    `json:"emailAddress"`
	twitterName   string    `json:"twitterName"`
	imageUri      string    `json:"imageUri"`
	createdAt     time.Time `json:"createdAt"`
}

func newUserResponse(user db.User) userResponse {
	return userResponse{
		fullName:      user.FullName.String,
		walletAddress: user.WalletAddress.String,
		countryCode:   user.CountryCode.String,
		emailAddress:  user.EmailAddress.String,
		twitterName:   user.TwitterName.String,
		imageUri:      user.ImageUri.String,
	}
}

// createUser godoc
// @Summary      Create An User
// @Description  create user by params
// @Tags         createUser
// @Accept       json
// @Produce      json
// @param fullName formData string true "fullName"
// @param walletAddress formData string true "walletAddress"
// @param countryCode formData string true "countryCode"
// @param emailAddress formData string true "emailAddress"
// @param twitterName formData string true "twitterName"
// @param imageUri formData string true "imageUri"
// @Success      200  {object}  userResponse
// @Failure      400  {string}  StatusBadRequest
// @Failure      404  {string}  StatusNotFound
// @Failure      500  {string}  StatusInternalServerError
// @Router       /createUser [POST]

func (server *Server) createUser(c echo.Context) error {

	createUser, err := server.store.CreateUser(c.Request().Context(), db.CreateUserParams{
		FullName:      sql.NullString{c.FormValue("fullName"), true},
		WalletAddress: sql.NullString{c.FormValue("walletAddress"), true},
		CountryCode:   sql.NullString{c.FormValue("countryCode"), true},
		EmailAddress:  sql.NullString{c.FormValue("emailAddress"), true},
		TwitterName:   sql.NullString{c.FormValue("twitterName"), true},
		ImageUri:      sql.NullString{c.FormValue("imageUri"), true},
		Nonce:         sql.NullString{c.FormValue("nonce"), true},
	})
	if err != nil {
		return err
	}
	return c.JSON(http.StatusCreated, createUser)
}
